{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","display","operator","total","input","displayTotal","compute","totalCopy","Number","setState","numberOnClickHandler","e","inputCopy","value","target","textContent","operatorOnClickHandler","acOnClickHandler","equalsOnClickHandler","id","colSpan","this","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be36168b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  state = {\n    display: 0,\n    operator:\"+\",\n    total:0,\n    input:0,\n    displayTotal:false,\n  }\n\n  compute = () => {\n    let input = this.state.input;\n    let totalCopy = this.state.total;\n    let operator = this.state.operator;\n\n    if(operator===\"รท\"){\n      totalCopy /= Number(input);\n    }else\n    if(operator===\"x\"){\n      totalCopy *= Number(input);\n    }else\n    if(operator===\"-\"){\n      totalCopy -= Number(input);\n    }else\n    if(operator===\"+\"){\n      totalCopy += Number(input);\n    }\n    this.setState({total:totalCopy,});\n  }\n\n\n  numberOnClickHandler = (e) => {\n    let totalCopy = this.state.total;\n    let inputCopy = this.state.input;\n    let value = e.target.textContent;\n\n    \n    if(this.state.displayTotal===true){\n      if(value === \"+/-\"){\n        totalCopy = totalCopy * -1;\n        this.setState({total:totalCopy,});\n      }else\n      if(value === \"%\"){\n        totalCopy = totalCopy / 100;\n        this.setState({total:totalCopy,});\n      }\n    }else{\n      if(value === \"+/-\"){\n        if(inputCopy !== \"\"){\n          inputCopy = Number(inputCopy) * -1;\n        }\n      }else \n      if(value === \"%\"){\n        if(inputCopy !== \"\"){\n          inputCopy = Number(inputCopy) / 100;\n        }\n      }\n      else{\n        inputCopy += value;\n      }\n      this.setState({input:inputCopy, display:Number(inputCopy)});\n    }\n  }\n\n  operatorOnClickHandler = (e) => {\n    let value = e.target.textContent;\n    if(this.state.displayTotal===true){\n      this.setState({displayTotal:false,})\n    }\n    else{\n      this.compute();\n    }\n    this.setState({operator:value, input:0, display:0,});\n  }\n\n  acOnClickHandler = () => {\n    this.setState({ display:0, total:0,operator:\"+\", input:0, displayTotal:false});\n  }\n\n  equalsOnClickHandler = () => {\n    this.compute();\n    this.setState({displayTotal:true});\n  }\n\n  render(){\n    return(\n      <div id=\"div-app\">\n        <table>\n          <tbody>\n            <tr>\n              <td colSpan=\"4\">\n                {this.state.displayTotal===true ? Number(this.state.total) : Number(this.state.input)}\n                </td>\n            </tr>\n            <tr>\n              <td onClick={this.acOnClickHandler}>AC</td>\n              <td onClick={this.numberOnClickHandler}>+/-</td>\n              <td onClick={this.numberOnClickHandler}>%</td>\n              <td onClick={this.operatorOnClickHandler}>รท</td>\n            </tr>\n            <tr>\n              <td onClick={this.numberOnClickHandler}>7</td>\n              <td onClick={this.numberOnClickHandler}>8</td>\n              <td onClick={this.numberOnClickHandler}>9</td>\n              <td onClick={this.operatorOnClickHandler}>x</td>\n            </tr>\n            <tr>\n              <td onClick={this.numberOnClickHandler}>4</td>\n              <td onClick={this.numberOnClickHandler}>5</td>\n              <td onClick={this.numberOnClickHandler}>6</td>\n              <td onClick={this.operatorOnClickHandler}>-</td>\n            </tr>\n            <tr>\n              <td onClick={this.numberOnClickHandler}>1</td>\n              <td onClick={this.numberOnClickHandler}>2</td>\n              <td onClick={this.numberOnClickHandler}>3</td>\n              <td onClick={this.operatorOnClickHandler}>+</td>\n            </tr>\n            <tr>\n              <td colSpan=\"2\" onClick={this.numberOnClickHandler}>0</td>\n              <td onClick={this.numberOnClickHandler}>.</td>\n              <td onClick={this.equalsOnClickHandler}>=</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}